name: Airflow CI/CD

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  ECR_REPOSITORY: ferry-airflow
  IMAGE_TAG: ${{ github.sha }}
  CLUSTER_NAME: ferry-airflow-cluster
  SUBNETS: "subnet-002a77caba1f65adb,subnet-00447eb04f282300b,subnet-0a083aed2467321bc,subnet-02c417661a1c5e7ae,subnet-0b11aad27c03c075f,subnet-0777a71f526b10991"
  SECURITY_GROUPS: "sg-015443daf2f73acce"

jobs:
  deploy-airflow:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build Docker Image
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Push Docker Image to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Register Task Definition - Webserver
        id: register-webserver-task-definition
        run: |
          TASK_DEFINITION=$(aws ecs register-task-definition \
            --family airflow-webserver \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu "1024" \
            --memory "2048" \
            --execution-role-arn ${{ secrets.EXECUTION_ROLE_ARN }} \
            --container-definitions "[{
              \"name\": \"airflow-webserver\",
              \"image\": \"${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG\",
              \"essential\": true,
              \"portMappings\":[{\"containerPort\":8080,\"protocol\":\"tcp\"}],
              \"command\":[\"webserver\"]
            }]" --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "task_definition_arn=$TASK_DEFINITION" >> $GITHUB_OUTPUT
      
      - name: Register Task Definition - Scheduler
        id: register-scheduler-task-definition
        run: |
          TASK_DEFINITION=$(aws ecs register-task-definition \
            --family airflow-scheduler \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu "1024" \
            --memory "2048" \
            --execution-role-arn ${{ secrets.EXECUTION_ROLE_ARN }} \
            --container-definitions "[{
              \"name\": \"airflow-scheduler\",
              \"image\": \"${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG\",
              \"essential\": true,
              \"command\":[\"scheduler\"]
            }]" --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "task_definition_arn=$TASK_DEFINITION" >> $GITHUB_OUTPUT

      - name: Update Webserver Service
        run: |
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service airflow-webserver-service \
            --task-definition ${{ steps.register-webserver-task-definition.outputs.task_definition_arn }} \
            --force-new-deployment

      - name: Update Scheduler Service
        run: |
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service airflow-scheduler-service \
            --task-definition ${{ steps.register-scheduler-task-definition.outputs.task_definition_arn }} \
            --force-new-deployment
